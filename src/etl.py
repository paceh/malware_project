import requests
import bs4
import gzip
import os
import json
import subprocess
import pandas as pd


def navigate_sitemap(cat, page):
    '''
    navigates sitemap for given category and page.
    returns the parsed xml page.
    '''
    url = 'https://apkpure.com/sitemaps/{0}-{1}.xml.gz'.format(cat,page)
    resp = requests.get(url)
    data = gzip.decompress(resp.content)
    return bs4.BeautifulSoup(data, features='lxml')


def get_download_page(soup, idx):
    '''
    return the parsed html file that is the download page for the
    apk file
    '''
    url = soup.find_all('loc')[idx].text + '/download?from=details'
    resp = requests.get(url)
    return bs4.BeautifulSoup(resp.text, features='lxml')


def download_apk(soup, outpath, cat, page):
    '''
    downloads apk files, returns nothing
    '''
    url = soup.find_all('a',{"id": "download_link"})[0]['href']
    resp = requests.get(url)
    with open('{0}/{1}-{2}.apk'.format(outpath,cat,page), 'wb') as f:
        f.write(resp.content)


def call_apktool(outpath, cat, page, keep_apks=True):
    '''
    calls apktool onto the apk files using subprocess.
    deletes the original apk files if keep_apks is false.
    '''
    subprocess.call(['apktool','d','{0}/{1}-{2}.apk'.format(outpath,cat,page),'-o','{0}/{1}-{2}'.format(outpath,cat,page)], stderr=subprocess.STDOUT)
    if keep_apks == False:
        os.remove('{0}/{1}-{2}.apk'.format(outpath,cat,page))

# ---------------------------------------------------------------------
# Driver Functions
# ---------------------------------------------------------------------

def get_data(**cfg):
    """
    Takes in config file containing all constraints for the search of apps. User may input
    categories, page number, number of results per page, outpath, and whether or not to keep
    the raw .apk files after extraction.

    :param: category: a list of categories to collect
    :param: pages: a list of pages to collect
    :param: num: int of the number of results to collect per page
    :param: outpath: string where to store all of the collected data
    :param: keep_apks: boolean whether or not to keep raw apk files
    """

    #Store config data
    category, pages, num, outpath, keep_apks = cfg['category'], cfg['pages'], cfg['num'], cfg['outpath'], cfg['keep_apks']
    #Ensure the outpath exists, if not then create it
    if os.path.isdir(outpath)==False: os.mkdir(outpath)
    #Traverse the categories and pages
    for cat in category:
        for page in pages:
            try:
                xml = navigate_sitemap(cat, page)
                for i in range(num):
                    html = get_download_page(xml, i)
                    download_apk(html, outpath, cat, page)
                    call_apktool(outpath, cat, page, keep_apks)
            except:
                print('The category {0} or page {1} didn\'t exist'.format(cat,page))

    return

def navigate_smali(directory):
    """
    Navigate through all of the files in each app and return all of the filepaths
    of every .smali file

    :param: directory: a list containing all of the directory filepaths
    """
    gen = os.walk(directory)
    smali_files = []
    i=0
    while True:
        try:
            n = next(gen)
            for file in n[2]:
                if '.smali' in file:
                    smali_files += [n[0]+"/"+file]
            i+=1
        except StopIteration:
            print("Navigated through {} directories".format(i))
            break
    return smali_files
