from collections import defaultdict
from tqdm import tqdm
import numpy as np
from scipy.sparse import lil_matrix
from helpers import parseSmaliFile

def a_matrix_calc(smali_dict):
    """
    returns the api_calls and apis_per_app for all apps
    """
    api_calls = defaultdict(int)
    apis_per_app = defaultdict(list)
    api_idx = 0

    print('Calculating A Matrix...')
    for app in tqdm(smali_dict):
        for file in smali_dict[app]:
            parsed_file = parseSmaliFile(open(file))
            for method in parsed_file['Methods']:
                for api_call in method['Android API']:
                    api = api_call.replace('\n','').split(' ')[-1]
                    if api not in api_calls:
                        api_calls[api] = api_idx
                        api_idx += 1
                    apis_per_app[app].extend([api_calls[api]])
    
    return api_calls, apis_per_app

# ---------------------------------------------------------------------
# Driver Function
# ---------------------------------------------------------------------

def A_matrix(api_calls, apis_per_app):
    """
    Given everything calculated from a_matrix_calc, create the
    matrix object using numpy's lil_matrix

    :param: api_calls: a dictionary of api calls with their index
    :param: apis_per_app: a list of each app's api calls used
    """

    i = len(apis_per_app) 
    j = len(api_calls) 
    matrix = lil_matrix((i, j), dtype=np.int8)
    app_idx = 0
    for app in apis_per_app:
        for apis in apis_per_app[app]:
            matrix[app_idx,apis] = 1
        app_idx += 1

    return matrix.toarray()