import pandas as pd
from sklearn.linear_model import LogisticRegression
from helpers import get_meta_data

def mergeDictArgs(first, second, *args):
    """
    merges two dictionaries by concatenating their values
    """
    def mergeDict(dict1, dict2):
        dict3 = {**dict1, **dict2}
        for key, value in dict3.items():
            if key in dict1 and key in dict2:
                dict3[key] += dict1[key]
        return dict3
    
    merged = mergeDict(first, second)
    for arg in args:
        merged = mergeDict(merged, arg)

    return merged

def preprocessing_feature_engineering(smali_dict):
    """
    all of the ROUGH DRAFT preprocessing, not yet robust,
    static to the current config.
    returns train test split
    """
    casual1 = smali_dict[list(smali_dict.keys())[0]]
    casual2 = smali_dict[list(smali_dict.keys())[1]]
    casual3 = smali_dict[list(smali_dict.keys())[2]]
    puzzle1 = smali_dict[list(smali_dict.keys())[3]]
    puzzle2 = smali_dict[list(smali_dict.keys())[4]]
    puzzle3 = smali_dict[list(smali_dict.keys())[5]]

    meta_data_casual1 = get_meta_data(casual1)
    meta_data_casual2 = get_meta_data(casual2)
    meta_data_casual3 = get_meta_data(casual3)
    meta_data_puzzle1 = get_meta_data(puzzle1)
    meta_data_puzzle2 = get_meta_data(puzzle2)
    meta_data_puzzle3 = get_meta_data(puzzle3)

    casual = pd.DataFrame(mergeDictArgs(meta_data_casual1, meta_data_casual2, meta_data_casual3))
    puzzle = pd.DataFrame(mergeDictArgs(meta_data_puzzle1, meta_data_puzzle2, meta_data_puzzle3))

    casual['Casual'] = [1,1,1]
    puzzle['Casual'] = [0,0,0]
    train = pd.concat([casual[:2], puzzle[:2]])
    test = pd.concat([casual[-1:], puzzle[-1:]])

    X_train = train.drop(['Casual','Top API Call','Top Invoke','Top Package'],axis=1)
    y_train = train.Casual
    X_test = test.drop(['Casual','Top API Call','Top Invoke','Top Package'],axis=1)
    y_test = test.Casual

    return X_train, y_train, X_test, y_test

# ---------------------------------------------------------------------
# Driver Functions
# ---------------------------------------------------------------------

def logreg(X_train, y_train, X_test, y_test):
    """
    Parse through all of the smali files and return all relevant information

    :param: content: the opened smali file to be parsed
    """
    logreg = LogisticRegression()
    logreg.fit(X_train, y_train)

    result = logreg.predict(X_test)
    print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))

    with open('data/out/output.txt','w') as f:
        for x in list(result):
            f.write(str(x)+'\n')

