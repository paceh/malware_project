#!/usr/bin/env python

import sys
import json
import shutil
import time

sys.path.insert(0, 'src') # add library code to path
from etl import get_data, navigate_smali
from A_matrix import A_matrix, a_matrix_calc
from B_matrix import B_matrix, b_matrix_calc
from P_matrix import P_matrix, p_matrix_calc
from I_matrix import I_matrix, i_matrix_calc
from classifier import logreg, preprocessing_feature_engineering
from helpers import parseSmaliFile, show_graph_with_labels, api_tokenizer, get_meta_data

DATA_PARAMS = 'config/data-params.json'
TEST_PARAMS = 'config/test-params.json'


def load_params(fp):
    with open(fp) as fh:
        param = json.load(fh)

    return param

def load_smali_dict(**cfg):
    directories = []
    smali_dict = {}

    for cat in cfg['category']:
        for page in cfg['pages']:
            directories += ['{0}/{1}-{2}/smali/'.format(cfg['outpath'], cat, page)]

    for directory in directories:
        smali_dict[directory] = navigate_smali(directory)

    return smali_dict


def main(targets):

    # to time the function
    start_time = time.time()
    # make the clean target
    if 'clean' in targets:
        shutil.rmtree('data/temp',ignore_errors=True)
        shutil.rmtree('data/out',ignore_errors=True)
        shutil.rmtree('data/raw',ignore_errors=True)

    # make the data target
    if 'data' in targets:
        cfg = load_params(DATA_PARAMS)

    # make the test target
    if 'test' in targets:
        cfg = load_params(TEST_PARAMS)

    get_data(**cfg)
    smali_dict = load_smali_dict(**cfg)

    app = smali_dict[list(smali_dict.keys())[0]]
    a_calc = a_matrix_calc(smali_dict)
    a_matrix = A_matrix(a_calc[0], a_calc[1])
    b_calc = b_matrix_calc(app)
    b_matrix = B_matrix(b_calc[0], b_calc[1])
    p_calc = p_matrix_calc(app)
    p_matrix = P_matrix(p_calc[0], p_calc[1])
    i_calc = i_matrix_calc(app)
    i_matrix = I_matrix(i_calc[0], i_calc[1])

    cleaned = preprocessing_feature_engineering(smali_dict)
    logreg(cleaned[0], cleaned[1], cleaned[2], cleaned[3])

    print('Finished in: {} seconds'.format(time.time() - start_time))
    return


if __name__ == '__main__':
    targets = sys.argv[1:]
    main(targets)
